<?php
/*
Plugin Name: AI_Post_Generator
Plugin URI: 
Description: 
Version: 
Author: 
Author URI: 
License: 
License URI: 
*/

/**
 * Schedule cron job.
 *
 * @return void
 */
function custom_core_activate() {
    if ( ! wp_next_scheduled( 'custom_event' ) ) {
        // Calculate the next occurrence of 18:40:00
        $next_18 = strtotime('18:40:00');
        // If 18:40:00 has already passed today, schedule for tomorrow
        if ( $next_18 < time() ) {
            $next_18 = strtotime('tomorrow 18:40:00');
        }
        wp_schedule_event( $next_18, 'daily', 'custom_event' );
    }
}

register_activation_hook( __FILE__, 'custom_core_activate' );

add_action( 'custom_event', 'custom_cronjob' );

/**
 * Do whatever you want to do in the cron job.
 */

function custom_cronjob() {
    // API URL
    $api_url = 'http://165.232.76.215:3000/articles/'.date('d-m-Y').'/to-publish/true';
    $response = wp_remote_get($api_url);

    if (!is_wp_error($response) && $response['response']['code'] == 200) {
        // Parse JSON response
        $data = json_decode($response['body'], true);

        // Check if data is available
        if ($data) {
            foreach ($data as $item) {
                // Predefined base URL for images
                $base_image_url = 'http://165.232.76.215:3000/image/';

                // Construct the full image URL
                $image_url = $base_image_url . $item['Image_id'];

                // Modify content to make lines with ## subheadings
                $modified_content = preg_replace('/^# (.*)$/m', '', $item['Content']);
 				$modified_content = preg_replace('/#{3,}/', '##',$modified_content);
				if (preg_match('##', $modified_content)) {
					$modified_content = preg_replace('/##/', '<br><br>##',$modified_content);
				}
                $modified_content = preg_replace('/## (.*)$/m', '<strong>$1</strong>', $modified_content);
				
				// Prepare post tags
                $tags = array_map('sanitize_text_field', $item['Tags']); // Ensure tags are sanitized

                // Ensure tags exist, create if they don't
                foreach ($tags as $tag) {
                    if (!term_exists($tag, 'post_tag')) {
                        wp_insert_term($tag, 'post_tag');
                    }
                }
				
				// Prepare post categories
                $categories = array();
                foreach ($item['Tags'] as $category_name) {
                    $category_name = sanitize_text_field($category_name);
                    $category = get_term_by('name', $category_name, 'category');

                    if (!$category) {
                        // Category doesn't exist, so create it
                        $new_category = wp_insert_term($category_name, 'category');
                        if (!is_wp_error($new_category)) {
                            $category_id = $new_category['term_id'];
                        }
                    } else {
                        $category_id = $category->term_id;
                    }

                    // Add the category ID to the categories array
                    $categories[] = $category_id;
                }


                // Define the post content from API data
                $new_post = array(
                    'post_title'    => $item['Title'],
                    'post_content'  => $modified_content,
					'post_excerpt'  => sanitize_text_field($item['Summary']),
                    'post_status'   => 'publish',
                    'post_author'   => 1, // Change this to the ID of the author
                    'post_type'     => 'post',
                    'post_category' => $categories, // Change this to the ID of the category
					'tags_input'    => $tags, // Assign tags to the post
                );

                // Insert the post into the database
                $post_id = wp_insert_post($new_post);

                if ($post_id) {
                    // Download the image and set it as the featured image
                    $image_id = custom_upload_image_from_url($image_url, $post_id);
                    error_log("Image ID: " . $image_id);
                    if ($image_id) {
						set_post_thumbnail_size(500,500,false);
                        set_post_thumbnail($post_id, $image_id);
                        error_log("Post inserted successfully. Post ID: " . $post_id);
                    }    
                } else {
                    error_log("Error inserting post.");
                }
            }
        } else {
            error_log("No data available from the custom API.");
        }
    } else {
        error_log("Error retrieving data from the custom API.");
    }
}


/**
 * Upload image from URL to WordPress media library.
 *
 * @param string $image_url
 * @return int|false Attachment ID on success, false on failure.
 */
function custom_upload_image_from_url($image_url,$post_id) {
	// Add Featured Image to Post
	$image_name       = $post_id.'.png';
	$upload_dir       = wp_upload_dir(); // Set upload folder
	$image_data       = file_get_contents($image_url); // Get image data
	$unique_file_name = wp_unique_filename( $upload_dir['path'], $image_name ); // Generate unique name
	$filename         = basename( $unique_file_name ); // Create image file name

	// Check folder permission and define file location
	if( wp_mkdir_p( $upload_dir['path'] ) ) {
		$file = $upload_dir['path'] . '/' . $filename;
	} else {
		$file = $upload_dir['basedir'] . '/' . $filename;
	}

	// Create the image  file on the server
	file_put_contents( $file, $image_data );

	// Check image file type
	$wp_filetype = wp_check_filetype( $filename, null );

	// Set attachment data
	$attachment = array(
		'post_mime_type' => $wp_filetype['type'],
		'post_title'     => sanitize_file_name( $filename ),
		'post_content'   => '',
		'post_status'    => 'inherit'
	);

	// Create the attachment
	$attach_id = wp_insert_attachment( $attachment, $file, $post_id );
	// Include image.php
	require_once(ABSPATH . 'wp-admin/includes/image.php');

	// Define attachment metadata
	$attach_data = wp_generate_attachment_metadata( $attach_id, $file );
	// Assign metadata to attachment
	wp_update_attachment_metadata( $attach_id, $attach_data );

    return $attach_id;
}


/**
 * Clear cron schedular.
 *
 * @return void
 */
function custom_deactivation() {
	wp_clear_scheduled_hook( 'custom_event' );
}

register_deactivation_hook( __FILE__, 'custom_deactivation' );
